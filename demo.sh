#!/bin/bash

# Demo Script for Students API with BFF and Android App
# This script outlines the steps to set up and demonstrate the project

echo "=== Students API Demo Script ==="
echo ""

echo "1. Prerequisites Check"
echo "   - Ensure you have Rust installed: rustc --version"
echo "   - Ensure you have Terraform installed: terraform --version"
echo "   - Ensure you have AWS CLI configured: aws sts get-caller-identity"
echo "   - Ensure you have Android Studio installed"
echo "   - Ensure you have Python 3.9+ installed: python3 --version"
echo ""

echo "2. Environment Setup"
echo "   Set the following environment variables:"
echo "   export AWS_REGION=us-east-1"
echo "   export JWT_SECRET=your-super-secret-jwt-key-here"
echo "   export DATABASE_URL=:memory:  # For local testing"
echo ""

echo "3. Build Lambda Functions"
echo ""
echo "   # Build Students API Lambda"
echo "   cd src"
echo "   cargo build --release --target x86_64-unknown-linux-musl"
echo "   zip -j ../deployment.zip target/x86_64-unknown-linux-musl/release/students_api"
echo ""
echo "   # Build BFF Lambda"
echo "   cd ../bff"
echo "   cargo build --release --target x86_64-unknown-linux-musl"
echo "   zip -j ../bff-deployment.zip target/x86_64-unknown-linux-musl/release/bff"
echo ""
echo "   # Package Python Email Processor"
echo "   cd .."
echo "   zip -r lambdas/email-processor/email_processor.zip email_processor.py"
echo ""

echo "4. Deploy Infrastructure"
echo ""
echo "   terraform init"
echo "   terraform plan"
echo "   terraform apply"
echo ""

echo "5. Update Android App Configuration"
echo ""
echo "   # Get the BFF API Gateway URL from Terraform outputs"
echo "   terraform output bff_api_invoke_url"
echo ""
echo "   # Update android/app/src/main/java/com/example/studentsapi/RetrofitClient.kt"
echo "   # Replace BASE_URL with the actual URL"
echo ""

echo "6. Build and Run Android App"
echo ""
echo "   cd android"
echo "   ./gradlew build"
echo "   ./gradlew installDebug  # Install on connected device/emulator"
echo ""

echo "7. Test the Flow"
echo ""
echo "   # 7.1 Test Students API directly"
echo "   # Get API Gateway URL and API Key"
echo "   API_URL=\$(terraform output task1_api_invoke_url)"
echo "   API_KEY=\$(terraform output api_key_value)"
echo ""
echo "   # Register a user"
echo "   curl -X POST \$API_URL/api/register \\"
echo "        -H 'Content-Type: application/json' \\"
echo "        -H 'x-api-key: \$API_KEY' \\"
echo "        -d '{\"username\": \"testuser\", \"password\": \"testpass\"}'"
echo ""
echo "   # Login to get JWT token"
echo "   TOKEN=\$(curl -X POST \$API_URL/api/login \\"
echo "             -H 'Content-Type: application/json' \\"
echo "             -H 'x-api-key: \$API_KEY' \\"
echo "             -d '{\"username\": \"testuser\", \"password\": \"testpass\"}' | jq -r '.token')"
echo ""
echo "   # Create a student"
echo "   curl -X POST \$API_URL/api/students \\"
echo "        -H 'Content-Type: application/json' \\"
echo "        -H 'Authorization: Bearer \$TOKEN' \\"
echo "        -H 'x-api-key: \$API_KEY' \\"
echo "        -d '{\"name\": \"John Doe\", \"age\": 20, \"photo_url\": \"https://example.com/photo.jpg\"}'"
echo ""

echo "   # 7.2 Test BFF Email Notification"
echo "   BFF_URL=\$(terraform output bff_api_invoke_url)"
echo ""
echo "   curl -X POST \$BFF_URL/notify/email \\"
echo "        -H 'Content-Type: application/json' \\"
echo "        -d '{\"email\": \"test@example.com\", \"subject\": \"Welcome!\", \"body\": \"Welcome to our platform\"}'"
echo ""

echo "   # 7.3 Check CloudWatch Logs"
echo "   # Monitor logs for email processing"
echo "   aws logs tail /aws/lambda/students-api-email-processor --follow"
echo ""

echo "8. Monitor and Debug"
echo ""
echo "   # Check Lambda logs"
echo "   aws logs describe-log-groups --log-group-name-prefix /aws/lambda/students-api"
echo ""
echo "   # Check SQS queue status"
echo "   QUEUE_URL=\$(terraform output email_queue_url)"
echo "   aws sqs get-queue-attributes --queue-url \$QUEUE_URL --attribute-names ApproximateNumberOfMessages"
echo ""
echo "   # Check DLQ if messages fail"
echo "   DLQ_URL=\$(terraform output email_dlq_url)"
echo "   aws sqs get-queue-attributes --queue-url \$DLQ_URL --attribute-names ApproximateNumberOfMessages"
echo ""

echo "9. Cleanup"
echo ""
echo "   # Destroy infrastructure when done"
echo "   terraform destroy"
echo ""

echo "10. Demo Flow for Teacher"
echo ""
echo "   1. Show the architecture diagram in README.md"
echo "   2. Demonstrate Terraform apply and infrastructure creation"
echo "   3. Show Lambda function builds and deployments"
echo "   4. Test API endpoints with curl commands"
echo "   5. Show Android app running and sending notifications"
echo "   6. Monitor CloudWatch logs showing email processing"
echo "   7. Demonstrate error handling with invalid emails"
echo "   8. Show Terraform destroy for cleanup"
echo ""

echo "=== Demo Complete ==="
